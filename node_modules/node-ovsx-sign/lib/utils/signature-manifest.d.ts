import { z } from "zod";
declare const vsixSignatureManifestSchema: z.ZodObject<{
    package: z.ZodObject<{
        size: z.ZodNumber;
        digests: z.ZodObject<{
            sha256: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            sha256: string;
        }, {
            sha256: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        size: number;
        digests: {
            sha256: string;
        };
    }, {
        size: number;
        digests: {
            sha256: string;
        };
    }>;
    entries: z.ZodRecord<z.ZodString, z.ZodObject<{
        size: z.ZodNumber;
        digests: z.ZodObject<{
            sha256: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            sha256: string;
        }, {
            sha256: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        size: number;
        digests: {
            sha256: string;
        };
    }, {
        size: number;
        digests: {
            sha256: string;
        };
    }>>;
}, "strip", z.ZodTypeAny, {
    entries: Record<string, {
        size: number;
        digests: {
            sha256: string;
        };
    }>;
    package: {
        size: number;
        digests: {
            sha256: string;
        };
    };
}, {
    entries: Record<string, {
        size: number;
        digests: {
            sha256: string;
        };
    }>;
    package: {
        size: number;
        digests: {
            sha256: string;
        };
    };
}>;
type VsixSignatureManifest = z.infer<typeof vsixSignatureManifestSchema>;
export declare const generateManifest: (vsixFilePath: string) => Promise<VsixSignatureManifest>;
export declare const verifyManifest: (manifest: VsixSignatureManifest, extensionPackagePath: string) => Promise<boolean>;
export {};
//# sourceMappingURL=signature-manifest.d.ts.map