/**
 * Sign an extension package. The signature is saved to `extension.sigzip`
 * @param vsixFilePath the path to the `.vsix` file of the extension
 * @param privateKeyFilePath the path to the private key used to sign the extension
 */
export declare const sign: (vsixFilePath: string, privateKeyFilePath: string, options?: {
    output?: string;
}) => Promise<void>;
/**
 * Verify an extension package against a signature archive
 * @param vsixFilePath The extension file path.
 * @param signatureArchiveFilePath The signature archive file path (`.sigzip`).
 * @param verbose A flag indicating whether or not to capture verbose detail in the event of an error.
 * @throws { ExtensionSignatureVerificationError } An error with a code indicating the validity, integrity, or trust issue
 * found during verification or a more fundamental issue (e.g. a required dependency was not found).
 */
export declare const verify: (vsixFilePath: string, signatureArchiveFilePath: string, verbose?: boolean, options?: {
    publicKey?: string;
    verifySignatureManifest?: boolean;
}) => Promise<boolean>;
export declare const keyPair: (options?: {
    outputDir?: string;
    overwrite: boolean;
}) => Promise<{
    privateKeyPath: string;
    publicKeyPath: string;
}>;
//# sourceMappingURL=commands.d.ts.map